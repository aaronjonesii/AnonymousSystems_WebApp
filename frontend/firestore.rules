rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
		// Super Admin Permission
  	match /{everythingInMyDatabase=**} {allow read, write: if false;}
    // Allow everyone to sign up for newsletter
//    match /newsletter-list/{newsletterID} {allow create;}
//    match /posts/{postID} {
//      function isSignedIn() { return request.auth != null; }
       // Read from the "roles" map in the resource (rsc).
//      function getRole(rsc) { return rsc.data.roles[request.auth.uid]; }
       // Determine if the user is one of an array of roles
//      function isOneOfRoles(rsc, array) { return isSignedIn() && (getRole(rsc) in array); }
             // Valid if post does not exist and the new post has the correct owner.
//      function isValidNewPost() {
//        return request.resource.data.roles[request.auth.uid] == 'owner';
//      }
       // Ensure that title and roles are unchanged and that no new
       // fields are added to the document.
//      function onlyContentChanged() {
//          return request.resource.data.title == resource.data.title
//            && request.resource.data.roles == resource.data.roles
//            && request.resource.data.keys() == resource.data.keys();
//        }


//       /* Posts Permissions */

       // Owners can read, write, and delete posts
//       allow write: if isValidNewPost() || isOneOfRoles(resource, ['owner']);
       // Any role can read stories.
//       allow read: if isOneOfRoles(resource, ['owner', 'writer', 'commenter', 'reader']);
       // Split writing into creation, deletion, and updating. Only an
       // owner can create or delete a post but a writer can update
       // post content.
//       allow create: if isValidNewPost();
//       allow delete: if isOneOfRoles(resource, ['owner']);
//       allow update: if isOneOfRoles(resource, ['owner'])
//                     || (isOneOfRoles(resource, ['writer']) && onlyContentChanged());

// 			/* Post Comments Permissions */

//       match /comments/{comment} {
         // Any role can read comments.
//         allow read: if isOneOfRoles(get(/databases/$(database)/documents/posts/$(postID)),
//                                     ['owner', 'writer', 'commenter', 'reader']);
         // Owners, writers, and commenters can create comments. The
         // user id in the comment document must match the requesting
         // user's id.
         //
         // Note: we have to use get() here to retrieve the post
         // document so that we can check the user's role.
//         allow create: if isOneOfRoles(get(/databases/$(database)/documents/posts/$(postID)),
//                                       ['owner', 'writer', 'commenter'])
//                       && request.resource.data.user == request.auth.uid;
//   		}
//    }
	}
}
